from dj_rest_auth.models import TokenModel
from django.utils.translation import gettext_lazy as _
from rest_framework import serializers
from rest_framework.exceptions import ValidationError

from base.models import Company, User, Profile


class CompanySerializerV1(serializers.ModelSerializer):
    class Meta:
        model = Company
        fields = "__all__"


class UserSerializerV1(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, required=False)

    class Meta:
        model = User
        fields = "__all__"

    def create(self, validated_data):
        password = validated_data.pop("password", None)
        instance = super().create(validated_data)

        if password:
            instance.set_password(password)
            instance.save()

        return instance

    def update(self, instance, validated_data):
        password = validated_data.pop("password", None)
        change_password = password and password != instance.password

        instance = super().update(instance, validated_data)
        if change_password:
            instance.set_password(password)
            instance.save()

        return instance


class TokenSerializerV1(serializers.ModelSerializer):
    user = serializers.SerializerMethodField("_user")
    token = serializers.SerializerMethodField("_token")

    def _token(self, token: TokenModel):
        return token.key

    def _user(self, token: TokenModel):
        return UserSerializerV1(token.user).data

    class Meta:
        model = TokenModel
        fields = (
            "token",
            "user",
        )


class ProfileSerializerV1(serializers.ModelSerializer):
    class Meta:
        model = Profile
        fields = "__all__"


class BaseCompanySerializerV1(serializers.ModelSerializer):
    company = CompanySerializerV1(
        required=False,
        allow_null=True,
    )

    def create(self, validated_data):
        from base.models import Company

        company = validated_data.pop("company", None)
        if not company:
            validated_data["company"] = Company.objects.first()
        return super().create(validated_data)


class BaseNotERPSerializerV1(serializers.ModelSerializer):
    erp_code = serializers.CharField(required=False, allow_null=True)

    def update(self, instance, validated_data):
        if instance.erp_code != "":
            raise ValidationError(_("Data generated by ERP cannot be updated"))

        return super().update(instance, validated_data)
